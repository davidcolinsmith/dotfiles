export TERRAFORM_IMAGE='artifactory.pipeline.smartsheet.com/docker/team-core-infra/docker-images/terraformer'
export TERRAFORM_VERSION='15-latest'

GREP_CMD=ggrep

function dtf() {
    # Set the terraformer image var
    if [ -z "$TERRAFORM_IMAGE" ]; then
      TERRAFORM_IMAGE='artifactory.pipeline.smartsheet.com/docker/team-core-infra/docker-images/terraformer'
    fi
    if [ ! -z "$TERRAFORM_IMAGE_VERSION" ]; then
      DOCKER_IMAGE="${TERRAFORM_IMAGE}:${TERRAFORM_IMAGE_VERSION}"
    else
        if [ -z "$TERRAFORM_VERSION" ]; then
          TERRAFORM_VERSION='latest'
        fi
        if [[ "$TERRAFORM_VERSION" == "latest" ]]; then
          DOCKER_IMAGE="${TERRAFORM_IMAGE}:latest"
        else
          DOCKER_IMAGE="${TERRAFORM_IMAGE}:tf-${TERRAFORM_VERSION}"
        fi
    fi

    DHOSTNAME=terraformer:$(echo $TERRAFORM_VERSION)
    if [ -d "${HOME}/.aws" ]; then
        AWSARG="-v${HOME}/.aws:/root/.aws"
    fi
    if [ -d "${HOME}/.ssh" ]; then
        SSHARG="-v${HOME}/.ssh:/root/.ssh"
    fi
    if [ -e "${HOME}/.gitconfig" ]; then
        GCARG="-v${HOME}/.gitconfig/root/.gitconfig"
    fi
    if [ $# -gt 0 ]; then
        EPARG="--entrypoint=terraform"
    else
        EPARG=""
    fi

    docker run -it --rm \
        -h $DHOSTNAME \
        -e AWS_PROFILE \
        -e AWS_ACCESS_KEY_ID \
        -e AWS_SECRET_ACCESS_KEY \
        -e AWS_SESSION_TOKEN \
        -e TF_LOG \
        -e TF_LOG_PATH \
        -e TF_INPUT \
        -e TF_CLI_ARGS \
        -e TF_DATA_DIR \
        -e VAULT_ADDR \
        -e VAULT_TOKEN \
        $AWSARG \
        $SSHARG \
        $GCARG \
        $VTARG \
        -v ${PWD}:/tfwork \
        -w /tfwork \
        $EPARG \
        $DOCKER_IMAGE \
        "${@}"
}

function dtg() {
    # Set the terraformer image var
    if [ -z "$TERRAFORM_IMAGE" ]; then
      TERRAFORM_IMAGE='artifactory.pipeline.smartsheet.com/docker/team-core-infra/docker-images/terraformer'
    fi
    if [ ! -z "$TERRAFORM_IMAGE_VERSION" ]; then
      DOCKER_IMAGE="${TERRAFORM_IMAGE}:${TERRAFORM_IMAGE_VERSION}"
    else
        if [ -z "$TERRAFORM_VERSION" ]; then
          TERRAFORM_VERSION='latest'
        fi
        if [[ "$TERRAFORM_VERSION" == "latest" ]]; then
          DOCKER_IMAGE="${TERRAFORM_IMAGE}:latest"
        else
          DOCKER_IMAGE="${TERRAFORM_IMAGE}:tf-${TERRAFORM_VERSION}"
        fi
    fi

    DHOSTNAME=terraformer:$(echo $TERRAFORM_VERSION)
    if [ -d "${HOME}/.aws" ]; then
        AWSARG="-v${HOME}/.aws:/root/.aws"
    fi
    if [ -d "${HOME}/.ssh" ]; then
        SSHARG="-v${HOME}/.ssh:/root/.ssh"
    fi
    if [ -e "${HOME}/.gitconfig" ]; then
        GCARG="-v${HOME}/.gitconfig/root/.gitconfig"
    fi
    if [ $# -gt 0 ]; then
        EPARG="--entrypoint=terragrunt"
    else
        EPARG=""
    fi

    # The working dir (-w) uses a postive lookbehind to map the PWD in to the
    # user's home directory volume mounted in the docker container (-v)
    docker run -it --rm \
        -h $DHOSTNAME \
        -e AWS_PROFILE \
        -e AWS_ACCESS_KEY_ID \
        -e AWS_SECRET_ACCESS_KEY \
        -e AWS_SESSION_TOKEN \
        -e TERRAGRUNT_BOOLEAN_OPTS \
        -e TERRAGRUNT_CHECK \
        -e TERRAGRUNT_CONFIG \
        -e TERRAGRUNT_EXCLUDE_DIR \
        -e TERRAGRUNT_IAM_ROLE \
        -e TERRAGRUNT_IGNORE_DEPENDENCY_ERRORS \
        -e TERRAGRUNT_IGNORE_DEPENDENCY_ORDER \
        -e TERRAGRUNT_IGNORE_EXTERNAL_DEPENDENCIES \
        -e TERRAGRUNT_INCLUDE_DIR \
        -e TERRAGRUNT_INCLUDE_EXTERNAL_DEPENDENCIES \
        -e TERRAGRUNT_INFO \
        -e TERRAGRUNT_NO_AUTO_INIT \
        -e TERRAGRUNT_NO_AUTO_RETRY \
        -e TERRAGRUNT_PARALLELISM \
        -e TERRAGRUNT_SOURCE \
        -e TERRAGRUNT_SOURCE_UPDATE \
        -e TERRAGRUNT_STRING_OPTS \
        -e TERRAGRUNT_TFPATH \
        -e TG_LOG \
        $AWSARG \
        $SSHARG \
        $GCARG \
        -v ${HOME}/workspace:/homedir/workspace \
        -w /homedir$(echo $PWD | $GREP_CMD -Po "(?<=$HOME).*") \
        $EPARG \
        $DOCKER_IMAGE \
        "${@}"
}

